// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: agent_plugin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentPluginClient is the client API for AgentPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentPluginClient interface {
	GetName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Name, error)
	GetUID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Uid, error)
}

type agentPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentPluginClient(cc grpc.ClientConnInterface) AgentPluginClient {
	return &agentPluginClient{cc}
}

func (c *agentPluginClient) GetName(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Name, error) {
	out := new(Name)
	err := c.cc.Invoke(ctx, "/agent_plugin.AgentPlugin/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPluginClient) GetUID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Uid, error) {
	out := new(Uid)
	err := c.cc.Invoke(ctx, "/agent_plugin.AgentPlugin/GetUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentPluginServer is the server API for AgentPlugin service.
// All implementations must embed UnimplementedAgentPluginServer
// for forward compatibility
type AgentPluginServer interface {
	GetName(context.Context, *Empty) (*Name, error)
	GetUID(context.Context, *Empty) (*Uid, error)
	mustEmbedUnimplementedAgentPluginServer()
}

// UnimplementedAgentPluginServer must be embedded to have forward compatible implementations.
type UnimplementedAgentPluginServer struct {
}

func (UnimplementedAgentPluginServer) GetName(context.Context, *Empty) (*Name, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}
func (UnimplementedAgentPluginServer) GetUID(context.Context, *Empty) (*Uid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUID not implemented")
}
func (UnimplementedAgentPluginServer) mustEmbedUnimplementedAgentPluginServer() {}

// UnsafeAgentPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentPluginServer will
// result in compilation errors.
type UnsafeAgentPluginServer interface {
	mustEmbedUnimplementedAgentPluginServer()
}

func RegisterAgentPluginServer(s grpc.ServiceRegistrar, srv AgentPluginServer) {
	s.RegisterService(&AgentPlugin_ServiceDesc, srv)
}

func _AgentPlugin_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPluginServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent_plugin.AgentPlugin/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPluginServer).GetName(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPlugin_GetUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPluginServer).GetUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent_plugin.AgentPlugin/GetUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPluginServer).GetUID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentPlugin_ServiceDesc is the grpc.ServiceDesc for AgentPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent_plugin.AgentPlugin",
	HandlerType: (*AgentPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _AgentPlugin_GetName_Handler,
		},
		{
			MethodName: "GetUID",
			Handler:    _AgentPlugin_GetUID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent_plugin.proto",
}
