// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: malware_scanner.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MalwareScannerClient is the client API for MalwareScanner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MalwareScannerClient interface {
	FindMalwareInfo(ctx context.Context, in *MalwareRequest, opts ...grpc.CallOption) (*MalwareResult, error)
}

type malwareScannerClient struct {
	cc grpc.ClientConnInterface
}

func NewMalwareScannerClient(cc grpc.ClientConnInterface) MalwareScannerClient {
	return &malwareScannerClient{cc}
}

func (c *malwareScannerClient) FindMalwareInfo(ctx context.Context, in *MalwareRequest, opts ...grpc.CallOption) (*MalwareResult, error) {
	out := new(MalwareResult)
	err := c.cc.Invoke(ctx, "/malware_scanner.MalwareScanner/FindMalwareInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MalwareScannerServer is the server API for MalwareScanner service.
// All implementations must embed UnimplementedMalwareScannerServer
// for forward compatibility
type MalwareScannerServer interface {
	FindMalwareInfo(context.Context, *MalwareRequest) (*MalwareResult, error)
	mustEmbedUnimplementedMalwareScannerServer()
}

// UnimplementedMalwareScannerServer must be embedded to have forward compatible implementations.
type UnimplementedMalwareScannerServer struct {
}

func (UnimplementedMalwareScannerServer) FindMalwareInfo(context.Context, *MalwareRequest) (*MalwareResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMalwareInfo not implemented")
}
func (UnimplementedMalwareScannerServer) mustEmbedUnimplementedMalwareScannerServer() {}

// UnsafeMalwareScannerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MalwareScannerServer will
// result in compilation errors.
type UnsafeMalwareScannerServer interface {
	mustEmbedUnimplementedMalwareScannerServer()
}

func RegisterMalwareScannerServer(s grpc.ServiceRegistrar, srv MalwareScannerServer) {
	s.RegisterService(&MalwareScanner_ServiceDesc, srv)
}

func _MalwareScanner_FindMalwareInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MalwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MalwareScannerServer).FindMalwareInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/malware_scanner.MalwareScanner/FindMalwareInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MalwareScannerServer).FindMalwareInfo(ctx, req.(*MalwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MalwareScanner_ServiceDesc is the grpc.ServiceDesc for MalwareScanner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MalwareScanner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "malware_scanner.MalwareScanner",
	HandlerType: (*MalwareScannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindMalwareInfo",
			Handler:    _MalwareScanner_FindMalwareInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "malware_scanner.proto",
}
