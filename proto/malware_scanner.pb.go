// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: malware_scanner.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MalwareDockerImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MalwareDockerImage) Reset() {
	*x = MalwareDockerImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_malware_scanner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwareDockerImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareDockerImage) ProtoMessage() {}

func (x *MalwareDockerImage) ProtoReflect() protoreflect.Message {
	mi := &file_malware_scanner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareDockerImage.ProtoReflect.Descriptor instead.
func (*MalwareDockerImage) Descriptor() ([]byte, []int) {
	return file_malware_scanner_proto_rawDescGZIP(), []int{0}
}

func (x *MalwareDockerImage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MalwareDockerImage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type MalwareContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *MalwareContainer) Reset() {
	*x = MalwareContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_malware_scanner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwareContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareContainer) ProtoMessage() {}

func (x *MalwareContainer) ProtoReflect() protoreflect.Message {
	mi := &file_malware_scanner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareContainer.ProtoReflect.Descriptor instead.
func (*MalwareContainer) Descriptor() ([]byte, []int) {
	return file_malware_scanner_proto_rawDescGZIP(), []int{1}
}

func (x *MalwareContainer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MalwareContainer) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type MalwareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Input:
	//	*MalwareRequest_Path
	//	*MalwareRequest_Image
	//	*MalwareRequest_Container
	Input isMalwareRequest_Input `protobuf_oneof:"input"`
}

func (x *MalwareRequest) Reset() {
	*x = MalwareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_malware_scanner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareRequest) ProtoMessage() {}

func (x *MalwareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_malware_scanner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareRequest.ProtoReflect.Descriptor instead.
func (*MalwareRequest) Descriptor() ([]byte, []int) {
	return file_malware_scanner_proto_rawDescGZIP(), []int{2}
}

func (m *MalwareRequest) GetInput() isMalwareRequest_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (x *MalwareRequest) GetPath() string {
	if x, ok := x.GetInput().(*MalwareRequest_Path); ok {
		return x.Path
	}
	return ""
}

func (x *MalwareRequest) GetImage() *MalwareDockerImage {
	if x, ok := x.GetInput().(*MalwareRequest_Image); ok {
		return x.Image
	}
	return nil
}

func (x *MalwareRequest) GetContainer() *MalwareContainer {
	if x, ok := x.GetInput().(*MalwareRequest_Container); ok {
		return x.Container
	}
	return nil
}

type isMalwareRequest_Input interface {
	isMalwareRequest_Input()
}

type MalwareRequest_Path struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3,oneof"`
}

type MalwareRequest_Image struct {
	Image *MalwareDockerImage `protobuf:"bytes,2,opt,name=image,proto3,oneof"`
}

type MalwareRequest_Container struct {
	Container *MalwareContainer `protobuf:"bytes,3,opt,name=container,proto3,oneof"`
}

func (*MalwareRequest_Path) isMalwareRequest_Input() {}

func (*MalwareRequest_Image) isMalwareRequest_Input() {}

func (*MalwareRequest_Container) isMalwareRequest_Input() {}

type MalwareResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Input:
	//	*MalwareResult_Path
	//	*MalwareResult_Image
	//	*MalwareResult_Container
	Input     isMalwareResult_Input `protobuf_oneof:"input"`
	Timestamp string                `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Malwares  []*MalwareInfo        `protobuf:"bytes,5,rep,name=malwares,proto3" json:"malwares,omitempty"`
}

func (x *MalwareResult) Reset() {
	*x = MalwareResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_malware_scanner_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwareResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareResult) ProtoMessage() {}

func (x *MalwareResult) ProtoReflect() protoreflect.Message {
	mi := &file_malware_scanner_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareResult.ProtoReflect.Descriptor instead.
func (*MalwareResult) Descriptor() ([]byte, []int) {
	return file_malware_scanner_proto_rawDescGZIP(), []int{3}
}

func (m *MalwareResult) GetInput() isMalwareResult_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (x *MalwareResult) GetPath() string {
	if x, ok := x.GetInput().(*MalwareResult_Path); ok {
		return x.Path
	}
	return ""
}

func (x *MalwareResult) GetImage() *MalwareDockerImage {
	if x, ok := x.GetInput().(*MalwareResult_Image); ok {
		return x.Image
	}
	return nil
}

func (x *MalwareResult) GetContainer() *MalwareContainer {
	if x, ok := x.GetInput().(*MalwareResult_Container); ok {
		return x.Container
	}
	return nil
}

func (x *MalwareResult) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *MalwareResult) GetMalwares() []*MalwareInfo {
	if x != nil {
		return x.Malwares
	}
	return nil
}

type isMalwareResult_Input interface {
	isMalwareResult_Input()
}

type MalwareResult_Path struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3,oneof"`
}

type MalwareResult_Image struct {
	Image *MalwareDockerImage `protobuf:"bytes,2,opt,name=image,proto3,oneof"`
}

type MalwareResult_Container struct {
	Container *MalwareContainer `protobuf:"bytes,3,opt,name=container,proto3,oneof"`
}

func (*MalwareResult_Path) isMalwareResult_Input() {}

func (*MalwareResult_Image) isMalwareResult_Input() {}

func (*MalwareResult_Container) isMalwareResult_Input() {}

type MalwareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageLayerId     string            `protobuf:"bytes,1,opt,name=image_layer_id,json=imageLayerId,proto3" json:"image_layer_id,omitempty"`
	RuleName         string            `protobuf:"bytes,2,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	StringsToMatch   []string          `protobuf:"bytes,3,rep,name=strings_to_match,json=stringsToMatch,proto3" json:"strings_to_match,omitempty"`
	SeverityScore    float64           `protobuf:"fixed64,4,opt,name=severity_score,json=severityScore,proto3" json:"severity_score,omitempty"`
	FileSeverity     string            `protobuf:"bytes,5,opt,name=file_severity,json=fileSeverity,proto3" json:"file_severity,omitempty"`
	FileSevScore     float64           `protobuf:"fixed64,6,opt,name=file_sev_score,json=fileSevScore,proto3" json:"file_sev_score,omitempty"`
	CompleteFilename string            `protobuf:"bytes,7,opt,name=complete_filename,json=completeFilename,proto3" json:"complete_filename,omitempty"`
	Meta             []string          `protobuf:"bytes,8,rep,name=meta,proto3" json:"meta,omitempty"`
	MetaRules        map[string]string `protobuf:"bytes,9,rep,name=meta_rules,json=metaRules,proto3" json:"meta_rules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Summary          string            `protobuf:"bytes,10,opt,name=summary,proto3" json:"summary,omitempty"`
	Class            string            `protobuf:"bytes,11,opt,name=class,proto3" json:"class,omitempty"`
}

func (x *MalwareInfo) Reset() {
	*x = MalwareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_malware_scanner_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MalwareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MalwareInfo) ProtoMessage() {}

func (x *MalwareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_malware_scanner_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MalwareInfo.ProtoReflect.Descriptor instead.
func (*MalwareInfo) Descriptor() ([]byte, []int) {
	return file_malware_scanner_proto_rawDescGZIP(), []int{4}
}

func (x *MalwareInfo) GetImageLayerId() string {
	if x != nil {
		return x.ImageLayerId
	}
	return ""
}

func (x *MalwareInfo) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *MalwareInfo) GetStringsToMatch() []string {
	if x != nil {
		return x.StringsToMatch
	}
	return nil
}

func (x *MalwareInfo) GetSeverityScore() float64 {
	if x != nil {
		return x.SeverityScore
	}
	return 0
}

func (x *MalwareInfo) GetFileSeverity() string {
	if x != nil {
		return x.FileSeverity
	}
	return ""
}

func (x *MalwareInfo) GetFileSevScore() float64 {
	if x != nil {
		return x.FileSevScore
	}
	return 0
}

func (x *MalwareInfo) GetCompleteFilename() string {
	if x != nil {
		return x.CompleteFilename
	}
	return ""
}

func (x *MalwareInfo) GetMeta() []string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *MalwareInfo) GetMetaRules() map[string]string {
	if x != nil {
		return x.MetaRules
	}
	return nil
}

func (x *MalwareInfo) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *MalwareInfo) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

var File_malware_scanner_proto protoreflect.FileDescriptor

var file_malware_scanner_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x38, 0x0a, 0x12, 0x4d, 0x61, 0x6c, 0x77,
	0x61, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x40, 0x0a, 0x10, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x07, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x86, 0x02, 0x0a, 0x0d, 0x4d, 0x61, 0x6c, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3b,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x08,
	0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x61,
	0x6c, 0x77, 0x61, 0x72, 0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0xe7, 0x03, 0x0a, 0x0b, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x76, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x76, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x4a, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x64, 0x0a, 0x0e, 0x4d, 0x61, 0x6c,
	0x77, 0x61, 0x72, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0f, 0x46,
	0x69, 0x6e, 0x64, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x2e, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65,
	0x65, 0x70, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_malware_scanner_proto_rawDescOnce sync.Once
	file_malware_scanner_proto_rawDescData = file_malware_scanner_proto_rawDesc
)

func file_malware_scanner_proto_rawDescGZIP() []byte {
	file_malware_scanner_proto_rawDescOnce.Do(func() {
		file_malware_scanner_proto_rawDescData = protoimpl.X.CompressGZIP(file_malware_scanner_proto_rawDescData)
	})
	return file_malware_scanner_proto_rawDescData
}

var file_malware_scanner_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_malware_scanner_proto_goTypes = []interface{}{
	(*MalwareDockerImage)(nil), // 0: malware_scanner.MalwareDockerImage
	(*MalwareContainer)(nil),   // 1: malware_scanner.MalwareContainer
	(*MalwareRequest)(nil),     // 2: malware_scanner.MalwareRequest
	(*MalwareResult)(nil),      // 3: malware_scanner.MalwareResult
	(*MalwareInfo)(nil),        // 4: malware_scanner.MalwareInfo
	nil,                        // 5: malware_scanner.MalwareInfo.MetaRulesEntry
}
var file_malware_scanner_proto_depIdxs = []int32{
	0, // 0: malware_scanner.MalwareRequest.image:type_name -> malware_scanner.MalwareDockerImage
	1, // 1: malware_scanner.MalwareRequest.container:type_name -> malware_scanner.MalwareContainer
	0, // 2: malware_scanner.MalwareResult.image:type_name -> malware_scanner.MalwareDockerImage
	1, // 3: malware_scanner.MalwareResult.container:type_name -> malware_scanner.MalwareContainer
	4, // 4: malware_scanner.MalwareResult.malwares:type_name -> malware_scanner.MalwareInfo
	5, // 5: malware_scanner.MalwareInfo.meta_rules:type_name -> malware_scanner.MalwareInfo.MetaRulesEntry
	2, // 6: malware_scanner.MalwareScanner.FindMalwareInfo:input_type -> malware_scanner.MalwareRequest
	3, // 7: malware_scanner.MalwareScanner.FindMalwareInfo:output_type -> malware_scanner.MalwareResult
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_malware_scanner_proto_init() }
func file_malware_scanner_proto_init() {
	if File_malware_scanner_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_malware_scanner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwareDockerImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_malware_scanner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwareContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_malware_scanner_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_malware_scanner_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwareResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_malware_scanner_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MalwareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_malware_scanner_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*MalwareRequest_Path)(nil),
		(*MalwareRequest_Image)(nil),
		(*MalwareRequest_Container)(nil),
	}
	file_malware_scanner_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*MalwareResult_Path)(nil),
		(*MalwareResult_Image)(nil),
		(*MalwareResult_Container)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_malware_scanner_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_malware_scanner_proto_goTypes,
		DependencyIndexes: file_malware_scanner_proto_depIdxs,
		MessageInfos:      file_malware_scanner_proto_msgTypes,
	}.Build()
	File_malware_scanner_proto = out.File
	file_malware_scanner_proto_rawDesc = nil
	file_malware_scanner_proto_goTypes = nil
	file_malware_scanner_proto_depIdxs = nil
}
