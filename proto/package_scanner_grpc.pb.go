// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: package_scanner.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PackageScannerClient is the client API for PackageScanner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackageScannerClient interface {
	GenerateSBOM(ctx context.Context, in *SBOMRequest, opts ...grpc.CallOption) (*SBOMResult, error)
}

type packageScannerClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageScannerClient(cc grpc.ClientConnInterface) PackageScannerClient {
	return &packageScannerClient{cc}
}

func (c *packageScannerClient) GenerateSBOM(ctx context.Context, in *SBOMRequest, opts ...grpc.CallOption) (*SBOMResult, error) {
	out := new(SBOMResult)
	err := c.cc.Invoke(ctx, "/package_scanner.PackageScanner/GenerateSBOM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageScannerServer is the server API for PackageScanner service.
// All implementations must embed UnimplementedPackageScannerServer
// for forward compatibility
type PackageScannerServer interface {
	GenerateSBOM(context.Context, *SBOMRequest) (*SBOMResult, error)
	mustEmbedUnimplementedPackageScannerServer()
}

// UnimplementedPackageScannerServer must be embedded to have forward compatible implementations.
type UnimplementedPackageScannerServer struct {
}

func (UnimplementedPackageScannerServer) GenerateSBOM(context.Context, *SBOMRequest) (*SBOMResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSBOM not implemented")
}
func (UnimplementedPackageScannerServer) mustEmbedUnimplementedPackageScannerServer() {}

// UnsafePackageScannerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageScannerServer will
// result in compilation errors.
type UnsafePackageScannerServer interface {
	mustEmbedUnimplementedPackageScannerServer()
}

func RegisterPackageScannerServer(s grpc.ServiceRegistrar, srv PackageScannerServer) {
	s.RegisterService(&PackageScanner_ServiceDesc, srv)
}

func _PackageScanner_GenerateSBOM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SBOMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageScannerServer).GenerateSBOM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/package_scanner.PackageScanner/GenerateSBOM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageScannerServer).GenerateSBOM(ctx, req.(*SBOMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PackageScanner_ServiceDesc is the grpc.ServiceDesc for PackageScanner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackageScanner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "package_scanner.PackageScanner",
	HandlerType: (*PackageScannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateSBOM",
			Handler:    _PackageScanner_GenerateSBOM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "package_scanner.proto",
}
