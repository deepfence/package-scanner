// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: kernel_tracer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KernelTracerClient is the client API for KernelTracer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KernelTracerClient interface {
	GetKernelSupport(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KernelInfo, error)
	GetMetrics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Metrics, error)
	GetFeatures(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KernelFeatures, error)
}

type kernelTracerClient struct {
	cc grpc.ClientConnInterface
}

func NewKernelTracerClient(cc grpc.ClientConnInterface) KernelTracerClient {
	return &kernelTracerClient{cc}
}

func (c *kernelTracerClient) GetKernelSupport(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KernelInfo, error) {
	out := new(KernelInfo)
	err := c.cc.Invoke(ctx, "/kernel_tracer.KernelTracer/GetKernelSupport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelTracerClient) GetMetrics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Metrics, error) {
	out := new(Metrics)
	err := c.cc.Invoke(ctx, "/kernel_tracer.KernelTracer/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelTracerClient) GetFeatures(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KernelFeatures, error) {
	out := new(KernelFeatures)
	err := c.cc.Invoke(ctx, "/kernel_tracer.KernelTracer/GetFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KernelTracerServer is the server API for KernelTracer service.
// All implementations must embed UnimplementedKernelTracerServer
// for forward compatibility
type KernelTracerServer interface {
	GetKernelSupport(context.Context, *Empty) (*KernelInfo, error)
	GetMetrics(context.Context, *Empty) (*Metrics, error)
	GetFeatures(context.Context, *Empty) (*KernelFeatures, error)
	mustEmbedUnimplementedKernelTracerServer()
}

// UnimplementedKernelTracerServer must be embedded to have forward compatible implementations.
type UnimplementedKernelTracerServer struct {
}

func (UnimplementedKernelTracerServer) GetKernelSupport(context.Context, *Empty) (*KernelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKernelSupport not implemented")
}
func (UnimplementedKernelTracerServer) GetMetrics(context.Context, *Empty) (*Metrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedKernelTracerServer) GetFeatures(context.Context, *Empty) (*KernelFeatures, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatures not implemented")
}
func (UnimplementedKernelTracerServer) mustEmbedUnimplementedKernelTracerServer() {}

// UnsafeKernelTracerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KernelTracerServer will
// result in compilation errors.
type UnsafeKernelTracerServer interface {
	mustEmbedUnimplementedKernelTracerServer()
}

func RegisterKernelTracerServer(s grpc.ServiceRegistrar, srv KernelTracerServer) {
	s.RegisterService(&KernelTracer_ServiceDesc, srv)
}

func _KernelTracer_GetKernelSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelTracerServer).GetKernelSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel_tracer.KernelTracer/GetKernelSupport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelTracerServer).GetKernelSupport(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelTracer_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelTracerServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel_tracer.KernelTracer/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelTracerServer).GetMetrics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelTracer_GetFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelTracerServer).GetFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel_tracer.KernelTracer/GetFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelTracerServer).GetFeatures(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// KernelTracer_ServiceDesc is the grpc.ServiceDesc for KernelTracer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KernelTracer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kernel_tracer.KernelTracer",
	HandlerType: (*KernelTracerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKernelSupport",
			Handler:    _KernelTracer_GetKernelSupport_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _KernelTracer_GetMetrics_Handler,
		},
		{
			MethodName: "GetFeatures",
			Handler:    _KernelTracer_GetFeatures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kernel_tracer.proto",
}
